{"name": "test_api[search_company-validate body json from search_content]", "status": "failed", "statusDetails": {"message": "AssertionError: failed to compare equal Status code is not as expected: 500 instead of expected: 200", "trace": "test_name = 'validate body json from search_content', endpoint = 'search_company', method = 'POST', body = '{\"full_name\": \"emma smith\", \"company_name\": \"Millard Public Schools\", \"is_current_company\": true}'\nexpected_response = '', expected_status_code = 200, validation = 'equal', params = None\n\n    @pytest.mark.parametrize('test_name, endpoint, method, body, expected_response, expected_status_code, validation, params',\n                             test_suite, ids=['-'.join([i[1], i[0]]) for i in test_suite])\n    def test_api(test_name, endpoint, method, body, expected_response, expected_status_code, validation, params):\n        \"\"\"\n        test API endpoint with the relevant variable\n    \n        :param endpoint: the relevant endpoint to be request from\n        :param method: the relevant method to request with\n        :param body: request body\n        :param expected_response: the expected response to compare with\n        :param expected_status_code: the expected status code to compare with\n        :param validation: validation method to compare with\n        :param params: additional params to the request if needed\n        :return: test result\n        \"\"\"\n        response = None\n        with allure.step(' '.join(['getting API response on endpoint:', str(endpoint)])):\n            response = APIRequestor().request(method=method, url_path=endpoint, body=body, params=params)\n        with allure.step(' '.join(['Asserting API status code expected:', str(expected_status_code), ', with response:', str(response.status_code)])):\n>           Compare.equal.__call__(a=expected_status_code, b=response.status_code, free_text=f\"Status code is not as expected: {response.status_code} instead of expected: {expected_status_code}\")\n\nlusha_test_api.py:45: \n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\ninfra/infra_utils/assertion.py:8: in equal\n    assert_equal(a, b, \"failed to compare equal \" + str(free_text) if free_text else '')\nvenv/lib/python3.7/site-packages/asserts/__init__.py:175: in assert_equal\n    fail(msg_fmt.format(msg=msg, first=first, second=second))\n_ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _ _\n\nmsg = 'failed to compare equal Status code is not as expected: 500 instead of expected: 200'\n\n    def fail(msg=None):\n        \"\"\"Raise an AssertionError with the given message.\n    \n        >>> fail(\"my message\")\n        Traceback (most recent call last):\n            ...\n        AssertionError: my message\n    \n        \"\"\"\n>       raise AssertionError(msg or \"assertion failure\")\nE       AssertionError: failed to compare equal Status code is not as expected: 500 instead of expected: 200\n\nvenv/lib/python3.7/site-packages/asserts/__init__.py:40: AssertionError"}, "description": "\n    test API endpoint with the relevant variable\n\n    :param endpoint: the relevant endpoint to be request from\n    :param method: the relevant method to request with\n    :param body: request body\n    :param expected_response: the expected response to compare with\n    :param expected_status_code: the expected status code to compare with\n    :param validation: validation method to compare with\n    :param params: additional params to the request if needed\n    :return: test result\n    ", "steps": [{"name": "getting API response on endpoint: search_company", "status": "passed", "steps": [{"name": "getting API response on endpoint: search_company , with method: POST , body content: {\"full_name\": \"emma smith\", \"company_name\": \"Millard Public Schools\", \"is_current_company\": true} , params: None", "status": "passed", "start": 1607838343742, "stop": 1607838344203}], "start": 1607838343742, "stop": 1607838344203}, {"name": "Asserting API status code expected: 200 , with response: 500", "status": "failed", "statusDetails": {"message": "AssertionError: failed to compare equal Status code is not as expected: 500 instead of expected: 200\n", "trace": "  File \"/home/moshe/Downloads/Temp/Lusha/lusha_test_api.py\", line 45, in test_api\n    Compare.equal.__call__(a=expected_status_code, b=response.status_code, free_text=f\"Status code is not as expected: {response.status_code} instead of expected: {expected_status_code}\")\n  File \"/home/moshe/Downloads/Temp/Lusha/infra/infra_utils/assertion.py\", line 8, in equal\n    assert_equal(a, b, \"failed to compare equal \" + str(free_text) if free_text else '')\n  File \"/home/moshe/Downloads/Temp/Lusha/venv/lib/python3.7/site-packages/asserts/__init__.py\", line 175, in assert_equal\n    fail(msg_fmt.format(msg=msg, first=first, second=second))\n  File \"/home/moshe/Downloads/Temp/Lusha/venv/lib/python3.7/site-packages/asserts/__init__.py\", line 40, in fail\n    raise AssertionError(msg or \"assertion failure\")\n"}, "start": 1607838344203, "stop": 1607838344204}], "parameters": [{"name": "test_name", "value": "'validate body json from search_content'"}, {"name": "endpoint", "value": "'search_company'"}, {"name": "method", "value": "'POST'"}, {"name": "body", "value": "'{\"full_name\": \"emma smith\", \"company_name\": \"Millard Public Schools\", \"is_current_company\": true}'"}, {"name": "expected_response", "value": "''"}, {"name": "expected_status_code", "value": "200"}, {"name": "validation", "value": "'equal'"}, {"name": "params", "value": "None"}], "start": 1607838343741, "stop": 1607838344204, "uuid": "3b15bcf5-c7ea-427a-8600-d8af8dbecd61", "historyId": "700fa30abc983c256b42d539c37860ea", "testCaseId": "5a506ec9d81a4b46d89eafcaa97a0e29", "fullName": "lusha_test_api#test_api", "labels": [{"name": "suite", "value": "lusha_test_api"}, {"name": "host", "value": "ThinkPad-T480s"}, {"name": "thread", "value": "18756-MainThread"}, {"name": "framework", "value": "pytest"}, {"name": "language", "value": "cpython3"}, {"name": "package", "value": "lusha_test_api"}]}